---
layout: post
title: "AOP面向切面编程"
date: 2014-10-21 16:00:00
categories: 读书笔记
---

#### AOP的基本概念：
1. aspect(切面): 切点和通知结合起来就是切面，类似于OOP中的一个类，它代表的是对象间横向的关系。
2. jointpoint(连接点): 是程序执行中的一个精确的执行点，例如类中的一个方法。是一个抽象的概念，在实现AOP时候，并不需要定义一个连接点。
3. advice(处理逻辑):
4. pointcut(切点): 本质上是一个获取连接点的结构，在AOP中，可以定义一个point cut，来捕获相关方法的调用。
5. introduction:允许添加新的属性和方法到类中。
6. target(目标类):
7. proxy(代理类):
8. weaving(插入):

#### 横切技术的主要解决的问题：
横切技术可以使AOP在给定的编程模型中穿越既定的职责部分（比如日志记录和性能优化）的操作。
在AOP中将具有公共逻辑的，和其它模块的核心逻辑纠缠在一起的行为称为横切关注点。

一个典型的软件系统包含一些核心关注点和系统级关注点。举例来说：信用卡的核心关注点是借贷存入处理，而系统级关注点是日志，事务完整性，授权，安全以及性能问题等。

我们可以将模块中的关注点分为核心关注点和横切关注点。

#### 动态横切：
动态横切是通过切入点和连接点在一个方面中创建行为的过程，连接点可以横向应用于现有对象。

#### 静态横切：
静态横切和动态横切的区别在于它不修改一个给定对象的执行行为。它允许通过引入附加方法字段和属性来修改对象的结构。在AOP的实现中，通常静态横切称为introduce或者mixin。

#### AOP的优势：
1. 在定义应用程序对某种服务（例如日志）的所有需求的时候。通过识别关注点，使得该服务能够被更好的定义，更好的被编写代码，并获得更多的功能。这种方式还能够处理在代码涉及到多个功能的时候所出现的问题，例如改变某一个功能可能会影响到其它的功能，在AOP中把这样的麻烦称之为“纠结（tangling）”。

2. 利用AOP技术对离散的方面进行的分析将有助于为开发团队指定一位精于该项工作的专家。负责这项工作的最佳人选将可以有效利用自己的相关技能和经验。

3. 持久性。标准的面向对象的项目开发中，不同的开发人员通常会为某项服务编写相同的代码，例如日志记录。随后他们会在自己的实施中分别对日志进行处理以满足不同单个对象的需求。而通过创建一段单独的代码片段，AOP提供了解决这一问题的持久简单的方案，这一方案强调了未来功能的重用性和易维护性：不需要在整个应用程序中一遍遍重新编写日志代码，AOP使得仅仅编写日志方面（logging aspect）成为可能，并且可以在这之上为整个应用程序提供新的功能。